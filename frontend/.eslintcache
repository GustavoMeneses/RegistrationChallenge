[{"/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/index.tsx":"1","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/pages/create-client/index.tsx":"2","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/pages/client/index.tsx":"3","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/pages/login/index.tsx":"4","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/services/api.ts":"5","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/services/person.ts":"6"},{"size":451,"mtime":1606397729809,"results":"7","hashOfConfig":"8"},{"size":19491,"mtime":1606398697213,"results":"9","hashOfConfig":"8"},{"size":5307,"mtime":1606397407307,"results":"10","hashOfConfig":"8"},{"size":2437,"mtime":1606366594956,"results":"11","hashOfConfig":"8"},{"size":2216,"mtime":1606414585807,"results":"12","hashOfConfig":"8"},{"size":629,"mtime":1606370555181,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"dd05ph",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/index.tsx",[],["29","30"],"/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/pages/create-client/index.tsx",["31"],"import React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom'\nimport { FormikProvider, useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, TextField, TextFieldProps } from '@material-ui/core';\nimport InputMask, { Props } from 'react-input-mask';\nimport personService from '../../services/person';\nimport addressService from '../../services/address';\nimport phoneService from '../../services/phone';\nimport personPhoneService from '../../services/person-phone';\nimport emailService from '../../services/email';\nimport personEmailService from '../../services/person-email';\nimport { Person } from '../../interfaces/person';\nimport Modal from '@material-ui/core/Modal';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { Phone } from '../../interfaces/phone';\nimport { Email } from '../../interfaces/email';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nfunction getModalStyle() {\n  return {\n    top: '50%',\n    left: '50%',\n    transform: `translate(-50%, -50%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    erro: {\n      position: 'absolute',\n      bottom: '62px',\n      'font-size': '12px',\n      color: 'red',\n    },\n    info: {\n      padding: '5px 10px',\n      border: '1px solid black',\n      borderRadius: '10px',\n      marginBottom: '5px'\n    }\n  }),\n);\n\nconst CreateClientPage: React.FC = () => {\n    let {id}: any = useParams();\n    const history = useHistory();\n    const [person, setPerson] = useState<Person>({} as Person)\n    const [load, setLoad] = useState(false);\n\n    // Controls phone modal\n    const [openPhone, setOpenPhone] = React.useState(false);\n    const [phones, setPhones] = React.useState<Phone[]>([]);\n    const [newPhone, setNewPhone] = React.useState<any>();\n    const [validPhone, setValidPhone] = React.useState(true);\n    const [phoneType, setPhoneType] = React.useState(1);\n\n    //Controls email modal\n    const [openEmail, setOpenEmail] = React.useState(false);\n    const [emails, setEmails] = React.useState<any[]>([]);\n    const [newEmail, setNewEmail] = React.useState<any>();\n    const [validEmail, setValidEmail] = React.useState(true);\n\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    // Arrow functions to phone modal\n    const openModalPhone = () => {\n      setOpenPhone(true);\n    };\n    const closeModalPhone = () => {\n      setOpenPhone(false);\n    };\n    const confirmPhone = () => {\n      if (!phoneType || !newPhone) return;\n      if (validPhone) {\n        setOpenPhone(false);\n        let value = phones;\n        if (newPhone) {\n          value.push(newPhone);\n        }\n        setPhones(value);\n        setPhoneType(1);\n      }\n    }\n    const validatePhone = (value: any) => {\n      if (!phoneType || !value) return;\n      const pattern = new RegExp(/^[0-9\\b]+$/);\n      if (!pattern.test(value)) {\n        setValidPhone(false);\n      } else if (phoneType === 3 && value.length !== 9) {\n        setValidPhone(false);\n      } else if ((phoneType === 1 || phoneType === 2) && value.length !== 8) {\n        setValidPhone(false);\n      } else {\n        setValidPhone(true);\n        setNewPhone({phone: value, phoneType});\n      }\n    }\n    const handlePhoneType = (value: any) => {\n      setPhoneType(value);\n    }\n    const bodyPhone = (\n      <div style={modalStyle} className={classes.paper}>\n        <h3 id=\"simple-modal-title\">Adicionar telefone</h3>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          onChange={event => handlePhoneType(event.target.value)}\n          value={phoneType}\n          style={{display: 'block'}}\n        >\n          <MenuItem value={1}>Residencial</MenuItem>\n          <MenuItem value={2}>Comercial</MenuItem>\n          <MenuItem value={3}>Celular</MenuItem>\n        </Select>\n        <input style={{display: 'block', margin: '20px 0'}} type=\"text\"\n               onChange={event => validatePhone(event.target.value)}/>\n        {validPhone ? '' : <span className={classes.erro}>Telefone inválido</span>}\n        <Button variant=\"contained\" color=\"primary\" onClick={confirmPhone}>Confirmar</Button>\n      </div>\n    );\n    const removePhone = (id: any) => {\n      const index = phones.findIndex((phone) => phone.id === id);\n      const removed = phones.splice(index, 1);\n      if (removed[0].id) {\n        phoneService.deletePhone(removed[0].id).then(() => {\n        });\n      }\n      setPhones(phones);\n      setLoad(!load);\n    }\n    const formatPhone = (value: any, type: any) => {\n      if (type === 3) {\n        return value.substring(0, 5) + '-' + value.substring(5, 9);\n      } else {\n        return value.substring(0, 4) + '-' + value.substring(4, 8);\n      }\n    }\n\n    // Arrow functions to email modal\n    const openModalEmail = () => {\n      setOpenEmail(true);\n    };\n    const closeModalEmail = () => {\n      setOpenEmail(false);\n    };\n    const confirmEmail = () => {\n      if (!newEmail) return;\n      if (validEmail) {\n        setOpenEmail(false);\n        let value = emails;\n        if (newEmail) {\n          value.push(newEmail);\n        }\n        setEmails(value);\n      }\n    }\n    const validateEmail = (value: any) => {\n      if (!value) return;\n      const pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n      if (!pattern.test(value)) {\n        setValidEmail(false);\n      } else {\n        setValidEmail(true);\n        setNewEmail({email: value});\n      }\n\n    }\n    const bodyEmail = (\n      <div style={modalStyle} className={classes.paper}>\n        <h3 id=\"simple-modal-title\">Adicionar e-mail</h3>\n        <input style={{display: 'block', margin: '20px 0'}} type=\"text\"\n               onChange={event => validateEmail(event.target.value)}/>\n        {validEmail ? '' : <span className={classes.erro}>E-mail inválido</span>}\n        <Button color=\"primary\" variant=\"contained\" onClick={confirmEmail}>Confirmar</Button>\n      </div>\n    );\n    const removeEmail = (id: any) => {\n      const index = emails.findIndex((email) => email.id === id);\n      const removed = emails.splice(index, 1);\n      if (removed[0].id) {\n        emailService.deleteEmail(removed[0].id).then(() => {\n        });\n      }\n      setEmails(emails);\n      setLoad(!load);\n    }\n\n    const formik = useFormik({\n      initialValues: person,\n      validationSchema: Yup.object({\n        name: Yup.string()\n          .max(100, 'Máximo de 100 caracteres')\n          .min(3, 'Mínimo de 3 caracteres')\n          .matches(/^[a-z0-9 ]+$/i, 'Nome deve conter apenas caracteres alfanuméricos')\n          .required('Campo obrigatório'),\n        socialSecurityNumber: Yup.string().required('Campo obrigatório'),\n        address: Yup.object({\n          zipCode: Yup.string().required('CEP é obrigatório'),\n          publicPlace: Yup.string().required('Logradouro é obrigatório'),\n          neighborhood: Yup.string().required('Bairro é obrigatório'),\n          city: Yup.string().required('Cidade é obrigatória'),\n          fu: Yup.string().required('UF é obrigatório'),\n          complement: Yup.string()\n        })\n      }),\n      onSubmit: values => {\n        if (!phones.length || !emails.length) {\n          return;\n        }\n        let idPerson: any = null;\n        values.address.zipCode = values.address.zipCode.replace(/\\D/g, '');\n\n        let sub = null;\n        if (id) {\n          sub = addressService.updateAddress(values.address, person.address.id)\n            .then(() => {\n              return personService.getPerson(id);\n            }).then((response) => {\n              response.name = values.name;\n              response.socialSecurityNumber = values.socialSecurityNumber;\n              return personService.updatePerson(response, response.id);\n            });\n        } else {\n          sub = addressService.createAddress(values.address)\n            .then((newAddress) => {\n              const person: any = {\n                name: values.name,\n                socialSecurityNumber: values.socialSecurityNumber,\n                address: {\n                  id: newAddress.id\n                }\n              }\n              return personService.createPerson(person);\n            });\n        }\n\n        sub.then((newPerson) => {\n          idPerson = newPerson.id;\n          let phonesList = [];\n          for (let value of phones) {\n            if (value.id) continue;\n            const phoneObj: any = {\n              phone: value.phone,\n              phoneType: value.phoneType\n            };\n            phonesList.push(phoneService.createPhone(phoneObj));\n          }\n          return Promise.all(phonesList);\n        }).then((newPhones: Phone[]) => {\n          let phonePersonList = [];\n          for (let value of newPhones) {\n            const phonePersonObj: any = {\n              phone: {\n                id: value.id\n              },\n              person: {\n                id: idPerson\n              }\n            };\n            phonePersonList.push(personPhoneService.createPersonPhone(phonePersonObj));\n          }\n          return Promise.all(phonePersonList);\n        }).then(() => {\n          let emailsList = [];\n          for (let value of emails) {\n            if (value.id) continue;\n            const emailObj: any = {\n              email: value.email\n            };\n            emailsList.push(emailService.createEmail(emailObj));\n          }\n          return Promise.all(emailsList);\n        }).then((newEmails: Email[]) => {\n          let emailPersonList = [];\n          for (let value of newEmails) {\n            const emailPersonObj: any = {\n              email: {\n                id: value.id\n              },\n              person: {\n                id: idPerson\n              }\n            };\n            emailPersonList.push(personEmailService.createPersonEmail(emailPersonObj));\n          }\n          return Promise.all(emailPersonList);\n        }).then(() => {\n          history.push('/');\n        }).catch((error) => {\n          throw new Error(error);\n        });\n\n\n      },\n    });\n\n    useEffect(() => {\n      if (id) {\n        personService.getPerson(id).then((response) => {\n          setPerson(response);\n          formik.setValues(response);\n          setPhones(response.phones);\n          setEmails(response.emails);\n        })\n      }\n    }, [id]);\n\n    const onChangeCep = (event: any) => {\n      const cep = event.target.value.replace(/\\D/g, '');\n      if (cep.length === 8) {\n        addressService.getCep(cep).then((response) => {\n          formik.setFieldValue('address.publicPlace', response.logradouro, true);\n          formik.setFieldValue('address.neighborhood', response.bairro, true);\n          formik.setFieldValue('address.city', response.localidade, true);\n          formik.setFieldValue('address.fu', response.uf, true);\n          formik.setFieldValue('address.complement', response.complemento, true);\n        })\n      }\n    };\n\n    const returnPage = () => {\n      history.push('/');\n    }\n\n    return (\n      <div style={{margin: '10%'}}>\n        <FormikProvider value={formik}>\n          <form onSubmit={formik.handleSubmit}>\n            <TextField\n              fullWidth\n              id=\"name\"\n              name=\"name\"\n              label=\"Nome\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n\n            <InputMask\n              mask=\"999.999.999-99\"\n              value={formik.values.socialSecurityNumber}\n              onChange={formik.handleChange}\n            >\n              {(inputProps: Props & TextFieldProps) =>\n                <TextField\n                  {...inputProps}\n                  type=\"tel\"\n                  label=\"CPF\"\n                  fullWidth\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  id=\"socialSecurityNumber\"\n                  name=\"socialSecurityNumber\"\n                  value={formik.values.socialSecurityNumber}\n                  error={formik.touched.socialSecurityNumber && Boolean(formik.errors.socialSecurityNumber)}\n                  helperText={formik.touched.socialSecurityNumber && formik.errors.socialSecurityNumber}\n                />\n              }\n            </InputMask>\n            <InputMask\n              mask=\"99999-999\"\n              value={formik.values.address?.zipCode}\n              onChange={formik.handleChange}\n              onBlur={onChangeCep}\n            >\n              {(inputProps: Props & TextFieldProps) =>\n                <TextField\n                  {...inputProps}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  type=\"tel\"\n                  label=\"CEP\"\n                  fullWidth\n                  id=\"address.zipCode\"\n                  name=\"address.zipCode\"\n                  error={formik.touched.address?.zipCode && Boolean(formik.errors.address?.zipCode)}\n                  helperText={formik.touched.address?.zipCode && formik.errors.address?.zipCode}\n                />\n              }\n            </InputMask>\n            <TextField\n              fullWidth\n              InputLabelProps={{\n                shrink: true,\n              }}\n              id=\"address.publicPlace\"\n              name=\"address.publicPlace\"\n              label=\"Logradouro\"\n              value={formik.values.address?.publicPlace}\n              onChange={formik.handleChange}\n              error={formik.touched.address?.publicPlace && Boolean(formik.errors.address?.publicPlace)}\n              helperText={formik.touched.address?.publicPlace && formik.errors.address?.publicPlace}\n            />\n            <TextField\n              fullWidth\n              InputLabelProps={{\n                shrink: true,\n              }}\n              id=\"address.neighborhood\"\n              name=\"address.neighborhood\"\n              label=\"Bairro\"\n              value={formik.values.address?.neighborhood}\n              onChange={formik.handleChange}\n              error={formik.touched.address?.neighborhood && Boolean(formik.errors.address?.neighborhood)}\n              helperText={formik.touched.address?.neighborhood && formik.errors.address?.neighborhood}\n            />\n            <TextField\n              fullWidth\n              InputLabelProps={{\n                shrink: true,\n              }}\n              id=\"address.city\"\n              name=\"address.city\"\n              label=\"Cidade\"\n              value={formik.values.address?.city}\n              onChange={formik.handleChange}\n              error={formik.touched.address?.city && Boolean(formik.errors.address?.city)}\n              helperText={formik.touched.address?.city && formik.errors.address?.city}\n            />\n            <TextField\n              fullWidth\n              InputLabelProps={{\n                shrink: true,\n              }}\n              id=\"address.fu\"\n              name=\"address.fu\"\n              label=\"UF\"\n              value={formik.values.address?.fu}\n              onChange={formik.handleChange}\n              error={formik.touched.address?.fu && Boolean(formik.errors.address?.fu)}\n              helperText={formik.touched.address?.fu && formik.errors.address?.fu}\n            />\n            <TextField\n              fullWidth\n              InputLabelProps={{\n                shrink: true,\n              }}\n              id=\"address.complement\"\n              name=\"address.complement\"\n              label=\"Complemento\"\n              value={formik.values.address?.complement}\n              onChange={formik.handleChange}\n              error={formik.touched.address?.complement && Boolean(formik.errors.address?.complement)}\n              helperText={formik.touched.address?.complement && formik.errors.address?.complement}\n            />\n            <div style={{display: 'flex', justifyContent: 'space-around', marginTop: '50px'}}>\n              <div>\n                <Button style={{marginBottom: '10px'}} variant=\"outlined\" color=\"primary\" onClick={openModalPhone}>\n                  Adicionar telefone\n                </Button>\n                {\n                  phones.map((value, index) => {\n                    return (\n                      <div key={index} style={{position: 'relative'}} className={classes.info}>\n                        {value.phoneType === 1 ? <div>Residencial</div> : ''}\n                        {value.phoneType === 2 ? <div>Comercial</div> : ''}\n                        {value.phoneType === 3 ? <div>Celular</div> : ''}\n                        {formatPhone(value.phone, value.phoneType)}\n                        <Button style={{position: 'absolute', right: '-12px', top: '11px'}}\n                                onClick={() => removePhone(index)}><ClearIcon/></Button>\n                      </div>\n                    )\n                  })\n                }\n              </div>\n              <div>\n                <Button style={{marginBottom: '10px'}} variant=\"outlined\" color=\"primary\" onClick={openModalEmail}>\n                  Adicionar e-mail\n                </Button>\n                {\n                  emails.map((value, index) => {\n                    return (\n                      <div className={classes.info} style={{position: 'relative'}} key={index}>\n                        {value.email}\n                        <Button style={{position: 'absolute', right: '-12px', top: '-1px'}}\n                                onClick={() => removeEmail(index)}><ClearIcon/></Button>\n                      </div>\n                    )\n                  })\n                }\n              </div>\n            </div>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n              <Button style={{width: '200px', marginTop: '50px'}} color=\"primary\" size=\"large\" variant=\"contained\"\n                      onClick={() => returnPage()}>\n                Voltar\n              </Button>\n              <Button style={{width: '200px', marginTop: '50px'}} color=\"primary\" size=\"large\" variant=\"contained\"\n                      type=\"submit\">\n                {id ? 'Atualizar' : 'Cadastrar'}\n              </Button>\n            </div>\n          </form>\n        </FormikProvider>\n        <Modal\n          open={openPhone}\n          onClose={closeModalPhone}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          {bodyPhone}\n        </Modal>\n        <Modal\n          open={openEmail}\n          onClose={closeModalEmail}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          {bodyEmail}\n        </Modal>\n      </div>\n    );\n  }\n;\n\nexport default CreateClientPage;\n","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/pages/client/index.tsx",[],"/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/pages/login/index.tsx",["32"],"import React, { useState } from 'react';\nimport './style.scss';\nimport { useAuth } from '../../context/auth';\nimport { Redirect } from 'react-router';\nimport { Card, Form, Button, Spinner, Toast } from 'react-bootstrap';\n\n\nconst LoginPage: React.FC = () => {\n  const { signed, signIn } = useAuth();\n\n  const [login, setLogin] = useState<string>();\n  const [senha, setSenha] = useState<string>();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleSubmit = (event: any) => {\n    const form = event.currentTarget;\n    if (!login || ! senha) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n    setLoading(true);\n    signIn(login, senha).then(() => {\n      setLoading(false);\n    }, () =>{\n      setError(true);\n      setLoading(false);\n      setTimeout(() => {\n        setError(false);\n      }, 1000);\n    });\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  return (\n    signed ? <Redirect to='/' /> :\n      <div className=\"wrapper\">\n        <Card className=\"card-wrapper\">\n          <Form className=\"form\" onSubmit={handleSubmit}>\n            <Form.Group controlId=\"login\">\n              <Form.Label>Login</Form.Label>\n              <Form.Control type=\"text\" required placeholder=\"Digite seu login\" onChange={(event: any) => {setLogin(event.target.value)}}/>\n            </Form.Group>\n\n            <Form.Group controlId=\"senha\">\n              <Form.Label>Senha</Form.Label>\n              <Form.Control type=\"password\" required placeholder=\"Senha\" onChange={(event: any) => {setSenha(event.target.value)}} />\n              <span className=\"help-block\">Digite sua senha</span>\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n              {loading && <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              />}\n              Entrar\n            </Button>\n          </Form>\n          <div style={{height: 90, marginTop: 20}}>\n            {error && <Toast>\n              <Toast.Header>\n                <strong className=\"mr-auto\">Atenção!</strong>\n              </Toast.Header>\n              <Toast.Body>Não foi possível autenticar-se com as credenciais fornecidas.</Toast.Body>\n            </Toast>}\n          </div>\n        </Card>\n      </div>\n  );\n};\n\nexport default LoginPage;\n","/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/services/api.ts",["33"],"/Users/gustavomonteiromeneses/Documents/DevPleno/codigo-fonte/frontend/src/services/person.ts",["34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":318,"column":8,"nodeType":"41","endLine":318,"endColumn":12,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":17,"column":11,"nodeType":"45","messageId":"46","endLine":17,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":73,"column":1,"nodeType":"49","endLine":73,"endColumn":79},{"ruleId":"47","severity":1,"message":"48","line":24,"column":1,"nodeType":"49","endLine":24,"endColumn":81},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.","ArrayExpression",["52"],"@typescript-eslint/no-unused-vars","'form' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [formik, id]",{"range":"55","text":"56"},[10899,10903],"[formik, id]"]